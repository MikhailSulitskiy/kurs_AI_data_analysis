# -*- coding: utf-8 -*-
"""СулицкийМВ_Курсовая работа_ВтораяМироваяВойна .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q1e0VaQ18qWo6oO5LveKJW5vNj9_ohRm

# Линейная регрессия (подготовка)
"""

import numpy as np # линейная алгебра
import pandas as pd # обработка данных
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
import operator

import os

Sum_Weather = pd.read_csv("/content/Summary of Weather.csv")

Sum_Weather.head(2)

Sum_Weather.info()

Sum_Weather.describe().T

# Извлечение 3 столбцов "MaxTemp", "MinTemp", "Date" для чистого и лучшего отображения
Sum_Weather_df = Sum_Weather[['MaxTemp','MinTemp', 'Date']]

Sum_Weather_df = Sum_Weather_df[:][:500]      # давайте возьмем предел для вычисления регрессионной оценки
Sum_Weather_df.head(2)

pd.to_datetime(Sum_Weather_df['Date'])

# См. рисунок с помощью метода scatter или plot

plt.figure(figsize=(22,10))
plt.plot(Sum_Weather_df.Date, Sum_Weather_df.MaxTemp, Sum_Weather_df.MinTemp,)
plt.title("Максимальная и минимальная температура по дате")
plt.xlabel("Дата")
plt.ylabel("Максимальная и минимальная температура")
plt.legend()
plt.show()

# проверим, сколько у нас нулевых значений
Sum_Weather_df.isnull().sum()

# Отбор характеристик
y = np.array(Sum_Weather_df['MaxTemp']).reshape(-1, 1)
X = np.array(Sum_Weather_df['MinTemp']).reshape(-1, 1)

# Разделение данных: %20 - тест, %80 - тренировка
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42)

"""#Линейная регрессия (решение)"""

from sklearn.linear_model import LinearRegression

lin_df = LinearRegression()  
lin_df.fit(X_train, y_train)

y_pred = lin_df.predict(X_test)                                     # Прогнозирование Линейной регрессионной модели Модели
accuracy_score = lin_df.score(X_test, y_test)                       # Оценка точности
print("Оценка Точности Модели Линейной Регрессии: " + "{:.1%}".format(accuracy_score))

from sklearn.metrics import mean_squared_error,r2_score
print("RMSE Оценка за тестовый набор: " +"{:.2}".format(rmse))
print("R2 Оценка: " +"{:.3}".format(r2_score(y_test, y_pred)));

# Напоследок нарисуем фигуру линейной регрессионной модели
plt.scatter(X_test, y_test, color='r')
plt.plot(X_test, y_pred, color='g')
plt.show()

"""#Решающее дерево"""

from sklearn.tree import DecisionTreeRegressor
dt_reg = DecisionTreeRegressor()          # Создадим решающее дерево с помощью sklearn
dt_reg.fit(X_train,y_train)

dt_predict = dt_reg.predict(X_train)

plt.scatter(X_train,y_train, color="red")                           # точки
X_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01)  
X_grid = X_grid.reshape((len(X_grid), 1))
plt.plot(X_grid,dt_reg.predict(X_grid),color="g")                 # линия
plt.xlabel("Температура")
plt.ylabel("Соленость") 
plt.title("Решающее дерево")
plt.show()

rmse = np.sqrt(mean_squared_error(y_train,dt_predict))
r2 = r2_score(y_train,dt_predict)
print("RMSE Оценка за тестовый набор: " +"{:.2}".format(rmse))
print("R2 Оценка за тестовый набор: " +"{:.2}".format(r2))

"""#Рандомный лес"""

from sklearn.ensemble import RandomForestRegressor

rf_reg = RandomForestRegressor(n_estimators=5, random_state=0)
rf_reg.fit(X_train,y_train)
rf_predict = rf_reg.predict(X_train)

plt.scatter(X_train,y_train, color="red")                           # точки
X_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01)  
X_grid = X_grid.reshape((len(X_grid), 1))
plt.plot(X_grid,rf_reg.predict(X_grid),color="b")                 # линии
plt.xlabel("Температура")
plt.ylabel("Соленость")
plt.title("Рандомный лес")
plt.show()

rmse = np.sqrt(mean_squared_error(y_train,rf_predict))
r2 = r2_score(y_train,rf_predict)
print("RMSE Оценка за тестовый набор: " +"{:.2}".format(rmse))
print("R2 SОценка за тестовый набор: " +"{:.2}".format(r2))